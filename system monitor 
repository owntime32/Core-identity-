sentinel_system/
├── core/
│   └── sentinel_core.py
├── control_panel/
│   └── control_panel_entity.py
├── modules/
│   ├── media_access_manager.py
│   ├── snapshot_registry.py
│   ├── rollback_manager.py
│   ├── fingerprinting.py
│   └── licensing.py
├── config/
│   └── settings.py
├── utils/
│   └── logger.py
└── main.py
class SentinelCore:
    def __init__(self):
        self.logs = []
        self.alerts = []

    def validate_action(self, module, action, metadata):
        log_entry = f"[{module}] Action: {action} | Metadata: {metadata}"
        self.logs.append(log_entry)
        if self._is_anomalous(action, metadata):
            self.alerts.append(log_entry)
            print(f"⚠️ ALERT: {log_entry}")
        else:
            print(f"✅ OK: {log_entry}")

    def _is_anomalous(self, action, metadata):
        return metadata.get("unauthorized", False)

    def get_logs(self):
        return self.logs

    def get_alerts(self):
        return self.alerts
import os

class MediaAccessManager:
    def __init__(self, media_type):
        self.media_type = media_type

    def open_media(self, file_path):
        ext = os.path.splitext(file_path)[-1].lower()
        if self.media_type == "picture" and ext in [".jpg", ".png"]:
            return self._view_only(file_path)
        elif self.media_type == "document" and ext in [".pdf", ".docx"]:
            return self._read_only(file_path)
        elif self.media_type == "video" and ext in [".mp4", ".mov"]:
            return self._playback_only(file_path)
        else:
            return "❌ Unsupported or unauthorized media type."

    def _view_only(self, path):
        print(f"📷 Viewing picture: {path}")
        return path

    def _read_only(self, path):
        print(f"📄 Reading document: {path}")
        return path

    def _playback_only(self, path):
        print(f"🎥 Playing video: {path}")
        return path
from core.sentinel_core import SentinelCore
from modules.media_access_manager import MediaAccessManager

class ControlPanelEntity:
    def __init__(self):
        self.sentinel = SentinelCore()

    def open_media(self, file_path, media_type):
        manager = MediaAccessManager(media_type)
        result = manager.open_media(file_path)
        self.sentinel.validate_action("MediaAccess", "open", {"file": file_path, "type": media_type})
        return result
from control_panel.control_panel_entity import ControlPanelEntity
import os

class MediaAccessManager:
    def __init__(self, media_type):
        self.media_type = media_type

    def open_media(self, file_path):
        ext = os.path.splitext(file_path)[-1].lower()
        if self.media_type == "picture" and ext in [".jpg", ".png"]:
            return self._view_only(file_path)
        elif self.media_type == "document" and ext in [".pdf", ".docx"]:
            return self._read_only(file_path)
        elif self.media_type == "video" and ext in [".mp4", ".mov"]:
            return self._playback_only(file_path)
        else:
            return "❌ Unsupported or unauthorized media type."

    def _view_only(self, path):
        print(f"📷 Viewing picture: {path}")
        return path

    def _read_only(self, path):
        print(f"📄 Reading document: {path}")
        return path

    def _playback_only(self, path):
        print(f"🎥 Playing video: {path}")
        return path
if __name__ == "__main__":
    cpe = ControlPanelEntity()
    cpe.open_media("assets/photo.jpg", "picture")
    cpe.open_media("docs/report.pdf", "document")
    cpe.open_media("videos/demo.mp4", "video")
def log(message):
    print(f"[LOG] {message}")
def log(message):
    print(f"[LOG] {message}")
from control_panel.control_panel_entity import ControlPanelEntity

if __name__ == "__main__":
    cpe = ControlPanelEntity()
    cpe.open_media("assets/photo.jpg", "picture")
    cpe.open_media("docs/report.pdf", "document")
    cpe.open_media("videos/demo.mp4", "video")
import hashlib
import time
import socket
import psutil

class SurfaceBoundaryMonitor:
    def __init__(self, sentinel_core):
        self.sentinel = sentinel_core
        self.transmission_log = []

    def scan_transmissions(self):
        connections = psutil.net_connections(kind='inet')
        for conn in connections:
            if conn.status == 'ESTABLISHED':
                fingerprint = self._fingerprint_connection(conn)
                self.transmission_log.append(fingerprint)
                self._validate_transmission(fingerprint)

    def _fingerprint_connection(self, conn):
        try:
            pid = conn.pid
            proc = psutil.Process(pid)
            app_name = proc.name()
            remote_ip = conn.raddr.ip if conn.raddr else "unknown"
            remote_port = conn.raddr.port if conn.raddr else "unknown"
            timestamp = int(time.time())
            payload = f"{app_name}-{remote_ip}-{remote_port}-{timestamp}"
            hash_id = hashlib.sha256(payload.encode()).hexdigest()
            return {
                "app": app_name,
                "remote_ip": remote_ip,
                "remote_port": remote_port,
                "timestamp": timestamp,
                "fingerprint": hash_id
            }
        except Exception as e:
            return {"error": str(e)}

    def _validate_transmission(self, fingerprint):
        suspicious = self._is_suspicious(fingerprint)
        metadata = {
            "app": fingerprint.get("app"),
            "remote_ip": fingerprint.get("remote_ip"),
            "unauthorized": suspicious
        }
        self.sentinel.validate_action("SurfaceBoundary", "transmission", metadata)

    def _is_suspicious(self, fingerprint):
        # Example logic: block unknown IPs or known leak patterns
        suspicious_ips = ["185.62.189.1", "103.21.244.0"]
        if fingerprint["remote_ip"] in suspicious_ips:
            return True
        if fingerprint["app"] not in self._trusted_apps():
            return True
        return False

    def _trusted_apps(self):
        return ["system_server", "coreidentity", "control_panel", "vpn_service"]
from modules.surface_boundary_monitor import SurfaceBoundaryMonitor

class ControlPanelEntity:
    def __init__(self):
        self.sentinel = SentinelCore()
        self.surface_monitor = SurfaceBoundaryMonitor(self.sentinel)

    def run_surface_scan(self):
        print("🧠 Running surface boundary scan...")
        self.surface_monitor.scan_transmissions()
cpe = ControlPanelEntity()
cpe.run_surface_scan()